// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: lesson/proto/lesson.proto

/*
Package educonn_lesson is a generated protocol buffer package.

It is generated from these files:
	lesson/proto/lesson.proto

It has these top-level messages:
	Lesson
	LessonBase
	LessonStatistics
	CreateLessonRequest
	CreateLessonResponse
	VideoLesson
	CreateVideoLessonRequest
	CreateVideoLessonResponse
	TextLesson
*/
package educonn_lesson

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for LessonService service

type LessonServiceClient interface {
	Create(ctx context.Context, in *CreateLessonRequest, opts ...client.CallOption) (*CreateLessonResponse, error)
}

type lessonServiceClient struct {
	c           client.Client
	serviceName string
}

func NewLessonServiceClient(serviceName string, c client.Client) LessonServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "educonn.lesson"
	}
	return &lessonServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *lessonServiceClient) Create(ctx context.Context, in *CreateLessonRequest, opts ...client.CallOption) (*CreateLessonResponse, error) {
	req := c.c.NewRequest(c.serviceName, "LessonService.Create", in)
	out := new(CreateLessonResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LessonService service

type LessonServiceHandler interface {
	Create(context.Context, *CreateLessonRequest, *CreateLessonResponse) error
}

func RegisterLessonServiceHandler(s server.Server, hdlr LessonServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&LessonService{hdlr}, opts...))
}

type LessonService struct {
	LessonServiceHandler
}

func (h *LessonService) Create(ctx context.Context, in *CreateLessonRequest, out *CreateLessonResponse) error {
	return h.LessonServiceHandler.Create(ctx, in, out)
}

// Client API for VideoLessonService service

type VideoLessonServiceClient interface {
	Create(ctx context.Context, in *CreateVideoLessonRequest, opts ...client.CallOption) (*CreateVideoLessonResponse, error)
}

type videoLessonServiceClient struct {
	c           client.Client
	serviceName string
}

func NewVideoLessonServiceClient(serviceName string, c client.Client) VideoLessonServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "educonn.lesson"
	}
	return &videoLessonServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *videoLessonServiceClient) Create(ctx context.Context, in *CreateVideoLessonRequest, opts ...client.CallOption) (*CreateVideoLessonResponse, error) {
	req := c.c.NewRequest(c.serviceName, "VideoLessonService.Create", in)
	out := new(CreateVideoLessonResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VideoLessonService service

type VideoLessonServiceHandler interface {
	Create(context.Context, *CreateVideoLessonRequest, *CreateVideoLessonResponse) error
}

func RegisterVideoLessonServiceHandler(s server.Server, hdlr VideoLessonServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&VideoLessonService{hdlr}, opts...))
}

type VideoLessonService struct {
	VideoLessonServiceHandler
}

func (h *VideoLessonService) Create(ctx context.Context, in *CreateVideoLessonRequest, out *CreateVideoLessonResponse) error {
	return h.VideoLessonServiceHandler.Create(ctx, in, out)
}
