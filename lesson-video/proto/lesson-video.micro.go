// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: lesson-video/proto/lesson-video.proto

/*
Package educonn_lesson_video is a generated protocol buffer package.

It is generated from these files:
	lesson-video/proto/lesson-video.proto

It has these top-level messages:
	VideoLessonDetails
	CreateRequest
	CreateResponse
*/
package educonn_lesson_video

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for VideoLesson service

type VideoLessonClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
}

type videoLessonClient struct {
	c           client.Client
	serviceName string
}

func NewVideoLessonClient(serviceName string, c client.Client) VideoLessonClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "educonn.lesson_video"
	}
	return &videoLessonClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *videoLessonClient) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "VideoLesson.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VideoLesson service

type VideoLessonHandler interface {
	Create(context.Context, *CreateRequest, *CreateResponse) error
}

func RegisterVideoLessonHandler(s server.Server, hdlr VideoLessonHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&VideoLesson{hdlr}, opts...))
}

type VideoLesson struct {
	VideoLessonHandler
}

func (h *VideoLesson) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.VideoLessonHandler.Create(ctx, in, out)
}
